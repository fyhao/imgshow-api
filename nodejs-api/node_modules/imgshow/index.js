var lib = {
	


    frequest : function(args) {
		http = require('http');
		
		try {
			var options = {};
		
			if(args.options) {
				
				options = args.options;
				
			}
			 
			if(args.url) {
				if(args.url.indexOf('http') == -1) return;
				var b = require('url').parse(args.url);
				
				// resolve host name
				if(b.hostname) {
					options.host = b.hostname;
				}
				
				// resolve port
				if(!b.port) {
					b.port = 80;
				}
				
				if(b.port) {
					options.port = b.port;
				}
				
				// resolve web path
				if(b.pathname) {
					options.path = b.pathname;
					
					if(b.search) {
						options.path += b.search;
					}
				}
					
			}
			
			if(args.headers) {
				options.headers = args.headers;
			}
		    
		    var request = http.get(options);
		
			if(args.callback || args.callbackJSON) {
				request.addListener('response', function(response){
				    var data = '';
				
				    response.addListener('data', function(chunk){ 
				        data += chunk; 
				    });
				    response.addListener('end', function(){
				        
				        // prepare data for callback
				        
				        if(data != '') {
				        	if(args.callback) {
					        	args.callback(data);
					        }
					        
					        if(args.callbackJSON) {
					        	try {
					        		var json = JSON.parse(data);
					        		args.callbackJSON(json);	
					        	
					        	} catch (e) {
					        		console.log(e);
					        	}
					        }
				        }
				        
				    });
				});
			}
		} catch (e) {
			console.log(e);
		}
		
		
	
	}
	
	,
	
	imgshow : function(request) {
		var c = new Object();
  c.params = [];
  c.seperator = ",";
  c.name = function(value) {
    this.params = [];
    this.p("name", value);
    return this;
  };
  c.p = function(name, value) {
    var item = new Object();
    item.name = name;
    item.value = value;
    this.params.push(item);
    return this;
  };
  c.buildQuery = function() {
    var q = "q:";
    var arr = [];
    for(var i in this.params) {
     var item = this.params[i];
     arr.push(item.name + "=" + item.value);
    }
    q += arr.join(this.seperator);
    return q;
  };
  
  c.load = function(callback) {
	    var query = this.buildQuery();
	    
	    var params = [];
	    params.k = query;
	    params.api = 1;
	    if(this.seperator != ",")
	      params.s = this.seperator;
	    var url = 'http://web.qxinnet.com/script/imgshow/?';
	    if(params) {
	    	var comma = '';
	    	for(var k in params) {
	    		var v = params[k];
	    		url += comma;
	    		url += k + '=' + v;
	    		comma = '&';
	    	}
	    }
	    var referer = 'nodejs';
	    if(request) {
	    	referer = request.headers.host;
	    }
	    frequest({
	    	url : url,
	    	headers : {
	    		referer : referer,
	    		'X-NODEJS-APP' : process.versions.node
	    	},
	    	callback : function(content) {
	    		callback(content);
	    	}
	    });
	    
	 };
	  return c;
	}
}

var frequest = lib.frequest;
module.exports = lib.imgshow;